<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd">

    <context:annotation-config />
    <context:component-scan base-package="com.waitingforcode"/>

    <int:channel id="directChannel" />
    <int:channel id="directChannelToQueue" />
    <int:channel id="priorityChannel">
        <int:priority-queue capacity="5" comparator="productMessageComparator" />
    </int:channel>
    <int:channel id="queueChannelWithMS">
        <int:queue message-store="productMessageStore" />
    </int:channel>


    <!-- send-timeout parameter is mandatory here. Otherwise, service activator will block whole application when QueueChannel's queue
         is full -->
    <int:service-activator input-channel="directChannel" ref="productActivator" requires-reply="true"
                           output-channel="priorityChannel" method="handleBookingProduct" send-timeout="1000" />
    <int:service-activator input-channel="directChannelToQueue" ref="productActivator" requires-reply="true"
                           output-channel="queueChannelWithMS" method="handleBookingProduct" send-timeout="1000" />

    <bean id="productMessageStore" class="com.waitingforcode.messagestores.ProductMessageStore">
        <property name="backupBasePath" value="/home/konieczny/doc/code/tmp/" />
    </bean>

</beans>